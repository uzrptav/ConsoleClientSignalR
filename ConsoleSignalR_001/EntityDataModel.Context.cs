//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleSignalR_001
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IntensFitEntities1 : DbContext
    {
        public IntensFitEntities1()
            : base("name=IntensFitEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<ApprovalState> ApprovalStates { get; set; }
        public virtual DbSet<Background> Backgrounds { get; set; }
        public virtual DbSet<Content> Contents { get; set; }
        public virtual DbSet<ContentType> ContentTypes { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupUser> GroupUsers { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MessageType> MessageTypes { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<AnswerList> AnswerLists { get; set; }
        public virtual DbSet<AnswerListItem> AnswerListItems { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientType> ClientTypes { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<EmploymentType> EmploymentTypes { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Coach> Coaches { get; set; }
        public virtual DbSet<CoachType> CoachTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserPhoto> UserPhotoes { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<NLog> NLogs { get; set; }
        public virtual DbSet<TestTable> TestTables { get; set; }
        public virtual DbSet<vw_TEMP_groups> vw_TEMP_groups { get; set; }
        public virtual DbSet<vw_User> vw_User { get; set; }
        public virtual DbSet<vw_UserPhoto> vw_UserPhoto { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        public virtual int proc_AddGroup(string i_name, Nullable<int> i_createdById, Nullable<short> i_backgroundId, ObjectParameter o_chatId)
        {
            var i_nameParameter = i_name != null ?
                new ObjectParameter("i_name", i_name) :
                new ObjectParameter("i_name", typeof(string));
    
            var i_createdByIdParameter = i_createdById.HasValue ?
                new ObjectParameter("i_createdById", i_createdById) :
                new ObjectParameter("i_createdById", typeof(int));
    
            var i_backgroundIdParameter = i_backgroundId.HasValue ?
                new ObjectParameter("i_backgroundId", i_backgroundId) :
                new ObjectParameter("i_backgroundId", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddGroup", i_nameParameter, i_createdByIdParameter, i_backgroundIdParameter, o_chatId);
        }
    
        public virtual int proc_AddMessage(Nullable<System.Guid> i_id, Nullable<int> i_groupUserId, Nullable<System.DateTime> i_createdOn, Nullable<short> i_typeId, Nullable<byte> i_approvalStateId, Nullable<System.DateTime> i_approvalStateOn, Nullable<int> i_approvalStateById, string i_text, Nullable<short> i_contentTypeId, byte[] i_contentData, byte[] i_contentDataCompressed)
        {
            var i_idParameter = i_id.HasValue ?
                new ObjectParameter("i_id", i_id) :
                new ObjectParameter("i_id", typeof(System.Guid));
    
            var i_groupUserIdParameter = i_groupUserId.HasValue ?
                new ObjectParameter("i_groupUserId", i_groupUserId) :
                new ObjectParameter("i_groupUserId", typeof(int));
    
            var i_createdOnParameter = i_createdOn.HasValue ?
                new ObjectParameter("i_createdOn", i_createdOn) :
                new ObjectParameter("i_createdOn", typeof(System.DateTime));
    
            var i_typeIdParameter = i_typeId.HasValue ?
                new ObjectParameter("i_typeId", i_typeId) :
                new ObjectParameter("i_typeId", typeof(short));
    
            var i_approvalStateIdParameter = i_approvalStateId.HasValue ?
                new ObjectParameter("i_approvalStateId", i_approvalStateId) :
                new ObjectParameter("i_approvalStateId", typeof(byte));
    
            var i_approvalStateOnParameter = i_approvalStateOn.HasValue ?
                new ObjectParameter("i_approvalStateOn", i_approvalStateOn) :
                new ObjectParameter("i_approvalStateOn", typeof(System.DateTime));
    
            var i_approvalStateByIdParameter = i_approvalStateById.HasValue ?
                new ObjectParameter("i_approvalStateById", i_approvalStateById) :
                new ObjectParameter("i_approvalStateById", typeof(int));
    
            var i_textParameter = i_text != null ?
                new ObjectParameter("i_text", i_text) :
                new ObjectParameter("i_text", typeof(string));
    
            var i_contentTypeIdParameter = i_contentTypeId.HasValue ?
                new ObjectParameter("i_contentTypeId", i_contentTypeId) :
                new ObjectParameter("i_contentTypeId", typeof(short));
    
            var i_contentDataParameter = i_contentData != null ?
                new ObjectParameter("i_contentData", i_contentData) :
                new ObjectParameter("i_contentData", typeof(byte[]));
    
            var i_contentDataCompressedParameter = i_contentDataCompressed != null ?
                new ObjectParameter("i_contentDataCompressed", i_contentDataCompressed) :
                new ObjectParameter("i_contentDataCompressed", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddMessage", i_idParameter, i_groupUserIdParameter, i_createdOnParameter, i_typeIdParameter, i_approvalStateIdParameter, i_approvalStateOnParameter, i_approvalStateByIdParameter, i_textParameter, i_contentTypeIdParameter, i_contentDataParameter, i_contentDataCompressedParameter);
        }
    
        public virtual int proc_GetUserGroups(string i_userCellphone)
        {
            var i_userCellphoneParameter = i_userCellphone != null ?
                new ObjectParameter("i_userCellphone", i_userCellphone) :
                new ObjectParameter("i_userCellphone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_GetUserGroups", i_userCellphoneParameter);
        }
    
        public virtual ObjectResult<proc_TestTable_Result> proc_TestTable(string i_value)
        {
            var i_valueParameter = i_value != null ?
                new ObjectParameter("i_value", i_value) :
                new ObjectParameter("i_value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_TestTable_Result>("proc_TestTable", i_valueParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int proc_AddLog(string machineName, string siteName, Nullable<System.DateTime> logged, string level, string userName, string message, string logger, string properties, string serverName, string port, string url, Nullable<bool> https, string serverAddress, string remoteAddress, string callSite, string exception)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("siteName", siteName) :
                new ObjectParameter("siteName", typeof(string));
    
            var loggedParameter = logged.HasValue ?
                new ObjectParameter("logged", logged) :
                new ObjectParameter("logged", typeof(System.DateTime));
    
            var levelParameter = level != null ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var loggerParameter = logger != null ?
                new ObjectParameter("logger", logger) :
                new ObjectParameter("logger", typeof(string));
    
            var propertiesParameter = properties != null ?
                new ObjectParameter("properties", properties) :
                new ObjectParameter("properties", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("serverName", serverName) :
                new ObjectParameter("serverName", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("url", url) :
                new ObjectParameter("url", typeof(string));
    
            var httpsParameter = https.HasValue ?
                new ObjectParameter("https", https) :
                new ObjectParameter("https", typeof(bool));
    
            var serverAddressParameter = serverAddress != null ?
                new ObjectParameter("serverAddress", serverAddress) :
                new ObjectParameter("serverAddress", typeof(string));
    
            var remoteAddressParameter = remoteAddress != null ?
                new ObjectParameter("remoteAddress", remoteAddress) :
                new ObjectParameter("remoteAddress", typeof(string));
    
            var callSiteParameter = callSite != null ?
                new ObjectParameter("callSite", callSite) :
                new ObjectParameter("callSite", typeof(string));
    
            var exceptionParameter = exception != null ?
                new ObjectParameter("exception", exception) :
                new ObjectParameter("exception", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_AddLog", machineNameParameter, siteNameParameter, loggedParameter, levelParameter, userNameParameter, messageParameter, loggerParameter, propertiesParameter, serverNameParameter, portParameter, urlParameter, httpsParameter, serverAddressParameter, remoteAddressParameter, callSiteParameter, exceptionParameter);
        }
    }
}
